// SPDX-License-Identifier: GPL-3.0

pragma solidity =0.8.9;

contract Park {
    struct Owner {
        string name;
        uint price; //change 
        string loc;
        uint numSpots;
        bool[] array_of_Spots; //open spots marked false, taken spots marked true in array_of_Spots
                }
    
    struct Parker {
        string name;
        string license;
        bool parked;
        string currSpot;
    }
    
    uint numOwners;
    mapping (uint => Owner) owners;

    function newOwner(string memory ID, uint price_of_spots, string memory location, uint number_of_spots) public returns (uint ownerID) { 
        ownerID = numOwners++; 
        Owner storage o = owners[ownerID];
        o.name = ID;
        o.price = price_of_spots;
        o.loc = location;
        o.numSpots = number_of_spots;
        o.array_of_Spots = new bool[](number_of_spots);
        uint i;
        for (i=0; i<=number_of_spots; i++){
            o.array_of_Spots[i] = false;
        }
    }
    
    function totalSpotCount() public view returns(uint spotNum){              //error something wrong with syntax
        uint i;
        for (i=0; i<=numOwners; i++) {
            spotNum = spotNum + owners[i].numSpots;
        }
    }
    
    function availSpotCount() public view returns(uint spotNum){              //error something wrong with syntax
        uint i;
        uint j;
        for (i=0; i<=numOwners; i++) {
            for (j=0; j<=owners[i].numSpots; j++){
                if(owners[i].array_of_Spots[j] == false){
                    spotNum++;
                }
            }
        }
    }
    
    function buySpot() public{
        //make sure spot is valid
        //make sure ethereum balance is valid
        //decrement num of valid spots
        //set currSpot equal to spot just bought
        //bool parked = 1;
    }
    
    function addSpot() public {
        //add additional spot to owner's profile
    }
   
}


// Step 1: User clicks if they are Parker or Owner
// Step 2: User enters in personal info
// Step 3: If owner, enter in number of spots to register, intialize all spots to valid
// Step 4: If parker, return list of valid parking spots with location







//To Test
// Step 1: Create owner account with 8 spots
// Step 2: Make sure some spots are valid and some invalid
// Step 3: Create driver account and buy a spots
// Step 4: Add functionality for owner to change spots availability at will unless driver is parked there

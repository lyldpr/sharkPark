// SPDX-License-Identifier: GPL-3.0

pragma solidity =0.8.9;

contract Park { 
    address public contractAdr;
    uint public balance;
    constructor() payable{
        contractAdr = msg.sender;
    }
    struct Owner {
        string name;
        address payable ownerWallet;
        uint price; //change 
        string loc;
        uint numSpots;
        uint takenSpots; //open spots marked false, taken spots marked true in array_of_Spots
                }
    
    struct Driver {
        string name;
        address payable driverWallet;
        string license;
        bool parked;
        string currSpot;
    }
    
    event TransferReceived(address, uint);
    receive() external payable {
        balance+=msg.value;
        emit TransferReceived(msg.sender, msg.value);
    }
    fallback () external payable {
    }
    
    uint numOwners;
    mapping (uint => Owner) owners;

    function newOwner(string memory ID, address payable adr, uint price_of_spots, string memory location, uint number_of_spots) public returns (uint ownerID) { 
        ownerID = numOwners++; 
        Owner storage o = owners[ownerID];
        o.name = ID;
        o.ownerWallet = adr;
        o.price = price_of_spots;
        o.loc = location;
        o.numSpots = number_of_spots;
        o.takenSpots = 0;
    }
    
    uint numDrivers;
    mapping (uint => Driver) drivers;
    
    function newDriver(string memory ID, address payable adr, string memory lic) public returns (uint driverID) { 
        driverID = numDrivers++; 
        Driver storage d = drivers[driverID];
        d.name = ID;
        d.driverWallet = adr;
        d.license = lic;
    }
    
    function totalSpotCount() public view returns(uint spotNum){              
        uint i;
        for (i=0; i<=numOwners; i++) {
            spotNum = spotNum + owners[i].numSpots;
        }
    }
    
    function availSpotCount() public view returns(uint spotNum){              
        uint i;
        for (i=0; i<=numOwners; i++) {
            spotNum = spotNum + owners[i].numSpots - owners[i].takenSpots;
        }
    }
    
    function buySpot(string memory ID, string memory location) external payable{
        uint i;
        uint ownerID;
        for (i=0; i<=numOwners; i++){
            if (compareStrings(owners[i].name, ID)==true){
                if (compareStrings(owners[i].loc, location)==true){
                    ownerID = i;
                    break;
                }
            }
        }
        Owner storage o = owners[ownerID];
        if (o.takenSpots<o.numSpots){
            o.takenSpots++;
            o.ownerWallet.transfer(100 wei);
            //transact ethereum
        }
    }
    function compareStrings(string memory a, string memory b) public pure returns (bool) {
        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));
    }
    
    function changeSpots(uint change, string memory ID, string memory location) public {
        uint i;
        uint ownerID;
        for (i=0; i<=numOwners; i++){
            if (compareStrings(owners[i].name, ID)==true){
                if (compareStrings(owners[i].loc, location)==true){
                    ownerID = i;
                    break;
                }
            }
        }
        Owner storage o = owners[ownerID];
        o.numSpots = o.numSpots+change;
    }
    function balanceOf() external view returns(uint){
        return address(this).balance;
    }
   
}

// Step 1: User clicks if they are Parker or Owner
// Step 2: User enters in personal info
// Step 3: If owner, enter in number of spots to register, intialize all spots to valid
// Step 4: If parker, return list of valid parking spots with location







//To Test
// Step 1: Create owner account with 8 spots
// Step 2: Make sure some spots are valid and some invalid
// Step 3: Create driver account and buy a spots
// Step 4: Add functionality for owner to change spots availability at will unless driver is parked there
